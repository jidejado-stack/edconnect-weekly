var app = (function (exports) {
    'use strict';

    const getCookie = function (name) {
    	var value = "; " + document.cookie;
    	var parts = value.split("; " + name + "=");
    	if (parts.length == 2) return parts.pop().split(";").shift();
    };

    // document.cookie=`theme=${event.target.value};path=/`

    const setCookie = function (sKey, sValue, { until, sPath, sDomain, bSecure}) {
    	const vEnd = until;
        if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) { return false; }
        var sExpires = "";
        if (!sPath) {
          sPath = "/";
        }
        if (vEnd) {
          switch (vEnd.constructor) {
            case Number:
    		  sExpires = vEnd === Infinity ? "; expires=Tue, 19 Jan 2038 03:14:07 GMT" : "; max-age=" + vEnd;
    		  console.log(sExpires);
              /*
              Note: Despite officially defined in RFC 6265, the use of `max-age` is not compatible with any
              version of Internet Explorer, Edge and some mobile browsers. Therefore passing a number to
              the end parameter might not work as expected. A possible solution might be to convert the the
              relative time to an absolute time. For instance, replacing the previous line with:
              */
              /*
              sExpires = vEnd === Infinity ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; expires=" + (new Date(vEnd * 1e3 + Date.now())).toUTCString();
              */
              break;
            case String:
              sExpires = "; expires=" + vEnd;
              break;
            case Date:
              sExpires = "; expires=" + vEnd.toUTCString();
              break;
          }
    	}
    	var data = encodeURIComponent(sKey) + "=" + encodeURIComponent(sValue) + sExpires + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "") + (bSecure ? "; secure" : "");
    	console.log(data);
        document.cookie = data;
    };

    const pasteNew = () => {
        document.getElementById("editor").focus();

        var lang = getCookie("language") || "plaintext";
        const pickLanguage = document.getElementById("language");
        pickLanguage.value = lang;
        pickLanguage.addEventListener("change", (event) => {
            setCookie("language", event.target.value, {until: Infinity});
        });
    };

    const POPULAR = [
        // { name: "Pastie", file: "../clean.css" },
        // { name: "----", file: "", dark: true },
        { name: "Grayscale", file: "grayscale.css" },
        { name: "Mono Blue", file: "mono-blue.css" },

        { name: "----", file: "", dark: true },
        { name: "Dark", file: "dark.css", dark: true },
        { name: "Gradient Dark", file: "gradient-dark.css", dark: true },
        { name: "Hybrid", file: "hybrid.css", dark: true },
        { name: "Ir Black", file: "ir-black.css", dark: true },
        { name: "Monokai Sublime", file: "monokai-sublime.css", dark: true },
        { name: "Night Owl", file: "night-owl.css", dark: true },
        { name: "Nord", file: "nord.css", dark: true },
        { name: "Railscasts", file: "railscasts.css", dark: true },
        { name: "Shades of Purple", file: "shades-of-purple.css", dark: true },
        { name: "Srcery", file: "srcery.css", dark: true },
        { name: "----", file: "", dark: true },

        { name: "Atom One (light)", file: "atom-one-light.css" },
        { name: "Docco", file: "docco.css" },
        { name: "Foundation", file: "foundation.css" },
        { name: "GitHub", file: "github-gist.css" },
        { name: "Gruvbox (light)", file: "gruvbox-light.css" },
        { name: "Solarized (light)", file: "solarized-light.css" },
        { name: "Understated", file: "default.css" },
        { name: "XCode (light)", file: "xcode.css" },
    ];

    const THEMES = [
        // { name: "A11y Light", file: "a11y-light.css" },

        // { name: "A11y (dark)", file: "a11y-dark.css", dark: true },
        // { name: "Agate", file: "agate.css", dark: true },
        // { name: "Arduino", file: "arduino-light.css" },
        // // { name: "An Old Hope", file: "an-old-hope.css", dark: true },
        // { name: "Ascetic", file: "ascetic.css", dark: true },
        // { name: "Atom One (light)", file: "atom-one-light.css" },
        // { name: "Atom One (dark)", file: "atom-one-dark.css" },
        // // { name: "Atom One Reasonable (dark)", file: "atom-one-dark-reasonable.css" },
        // { name: "Darcula", file: "darcula.css" },
        // { name: "Foundation", file: "foundation.css" },
        // { name: "Github", file: "github.css" },
        // { name: "Github Gist", file: "github-gist.css" },
        // { name: "Gruvbox (light)", file: "gruvbox-light.css" },
        // { name: "Gruvbox (dark)", file: "gruvbox-dark.css", dark:true },
        // { name: "Kimbie (light)", file: "kimbie.light.css" },
        // { name: "Kimbie (dark)", file: "kimbie.dark.css", dark:true },
        // { name: "Hopscotch", file: "hopscotch.css" },
        // // { name: "Lightfair", file: "lightfair.css", dark: true },
        // { name: "Obsidian", file: "obsidian.css", dark: true },
        // { name: "Sunburst", file: "sunburst.css", dark: true },
        // // { name: "Tomorrow Night (eighties)", file: "tomorrow-night-eighties.css", dark: true },
        // { name: "VS 2015", file: "vs2015.css", dark: true },
        // { name: "Visual Studio", file: "vs.css", dark: true },
        // { name: "Zenburn", file: "zenburn.css", dark: true },

        {name: "a11y-dark.css", file: "a11y-dark.css" },
        {name: "a11y-light.css", file: "a11y-light.css" },
        {name: "agate.css", file: "agate.css" },
        {name: "an-old-hope.css", file: "an-old-hope.css" },
        {name: "androidstudio.css", file: "androidstudio.css" },
        {name: "arduino-light.css", file: "arduino-light.css" },
        {name: "arta.css", file: "arta.css" },
        {name: "ascetic.css", file: "ascetic.css" },
        {name: "atelier-cave-dark.css", file: "atelier-cave-dark.css" },
        {name: "atelier-cave-light.css", file: "atelier-cave-light.css" },
        {name: "atelier-dune-dark.css", file: "atelier-dune-dark.css" },
        {name: "atelier-dune-light.css", file: "atelier-dune-light.css" },
        {name: "atelier-estuary-dark.css", file: "atelier-estuary-dark.css" },
        {name: "atelier-estuary-light.css", file: "atelier-estuary-light.css" },
        {name: "atelier-forest-dark.css", file: "atelier-forest-dark.css" },
        {name: "atelier-forest-light.css", file: "atelier-forest-light.css" },
        {name: "atelier-heath-dark.css", file: "atelier-heath-dark.css" },
        {name: "atelier-heath-light.css", file: "atelier-heath-light.css" },
        {name: "atelier-lakeside-dark.css", file: "atelier-lakeside-dark.css" },
        {name: "atelier-lakeside-light.css", file: "atelier-lakeside-light.css" },
        {name: "atelier-plateau-dark.css", file: "atelier-plateau-dark.css" },
        {name: "atelier-plateau-light.css", file: "atelier-plateau-light.css" },
        {name: "atelier-savanna-dark.css", file: "atelier-savanna-dark.css" },
        {name: "atelier-savanna-light.css", file: "atelier-savanna-light.css" },
        {name: "atelier-seaside-dark.css", file: "atelier-seaside-dark.css" },
        {name: "atelier-seaside-light.css", file: "atelier-seaside-light.css" },
        {name: "atelier-sulphurpool-dark.css", file: "atelier-sulphurpool-dark.css" },
        {name: "atelier-sulphurpool-light.css", file: "atelier-sulphurpool-light.css" },
        {name: "atom-one-dark-reasonable.css", file: "atom-one-dark-reasonable.css" },
        {name: "atom-one-dark.css", file: "atom-one-dark.css" },
        {name: "atom-one-light.css", file: "atom-one-light.css" },
        {name: "brown-paper.css", file: "brown-paper.css" },
        {name: "brown-papersq.png", file: "brown-papersq.png" },
        {name: "codepen-embed.css", file: "codepen-embed.css" },
        {name: "color-brewer.css", file: "color-brewer.css" },
        {name: "darcula.css", file: "darcula.css" },
        {name: "dark.css", file: "dark.css" },
        {name: "darkula.css", file: "darkula.css" },
        {name: "default.css", file: "default.css" },
        {name: "docco.css", file: "docco.css" },
        {name: "dracula.css", file: "dracula.css" },
        {name: "far.css", file: "far.css" },
        {name: "foundation.css", file: "foundation.css" },
        {name: "github-gist.css", file: "github-gist.css" },
        {name: "github.css", file: "github.css" },
        {name: "gml.css", file: "gml.css" },
        {name: "googlecode.css", file: "googlecode.css" },
        {name: "grayscale.css", file: "grayscale.css" },
        {name: "gruvbox-dark.css", file: "gruvbox-dark.css" },
        {name: "gruvbox-light.css", file: "gruvbox-light.css" },
        {name: "hopscotch.css", file: "hopscotch.css" },
        {name: "hybrid.css", file: "hybrid.css" },
        {name: "idea.css", file: "idea.css" },
        {name: "ir-black.css", file: "ir-black.css" },
        {name: "isbl-editor-dark.css", file: "isbl-editor-dark.css" },
        {name: "isbl-editor-light.css", file: "isbl-editor-light.css" },
        {name: "kimbie.dark.css", file: "kimbie.dark.css" },
        {name: "kimbie.light.css", file: "kimbie.light.css" },
        {name: "lightfair.css", file: "lightfair.css" },
        {name: "magula.css", file: "magula.css" },
        {name: "mono-blue.css", file: "mono-blue.css" },
        {name: "monokai-sublime.css", file: "monokai-sublime.css" },
        {name: "monokai.css", file: "monokai.css" },
        {name: "night-owl.css", file: "night-owl.css" },
        {name: "nord.css", file: "nord.css" },
        {name: "obsidian.css", file: "obsidian.css" },
        {name: "ocean.css", file: "ocean.css" },
        {name: "paraiso-dark.css", file: "paraiso-dark.css" },
        {name: "paraiso-light.css", file: "paraiso-light.css" },
        {name: "pojoaque.css", file: "pojoaque.css" },
        {name: "pojoaque.jpg", file: "pojoaque.jpg" },
        {name: "purebasic.css", file: "purebasic.css" },
        {name: "qtcreator_dark.css", file: "qtcreator_dark.css" },
        {name: "qtcreator_light.css", file: "qtcreator_light.css" },
        {name: "railscasts.css", file: "railscasts.css" },
        {name: "rainbow.css", file: "rainbow.css" },
        {name: "routeros.css", file: "routeros.css" },
        {name: "school-book.css", file: "school-book.css" },
        {name: "school-book.png", file: "school-book.png" },
        {name: "shades-of-purple.css", file: "shades-of-purple.css" },
        {name: "solarized-dark.css", file: "solarized-dark.css" },
        {name: "solarized-light.css", file: "solarized-light.css" },
        {name: "sunburst.css", file: "sunburst.css" },
        {name: "tomorrow-night-blue.css", file: "tomorrow-night-blue.css" },
        {name: "tomorrow-night-bright.css", file: "tomorrow-night-bright.css" },
        {name: "tomorrow-night-eighties.css", file: "tomorrow-night-eighties.css" },
        {name: "tomorrow-night.css", file: "tomorrow-night.css" },
        {name: "tomorrow.css", file: "tomorrow.css" },
        {name: "vs.css", file: "vs.css" },
        {name: "vs2015.css", file: "vs2015.css" },
        {name: "xcode.css", file: "xcode.css" },
        {name: "xt256.css", file: "xt256.css" },
        {name: "zenburn.css", file: "zenburn.css" }
    ];




    THEMES.default = "shades-of-purple.css";
    POPULAR.default = "shades-of-purple.css";
    // exports.THEMES = POPULAR.concat(THEMES)
    var THEMES_1 = POPULAR;

    var themes = {
    	THEMES: THEMES_1
    };

    const SKIP_BUILD = ["html"];
    const languages = {
        // common
        apache: "Apache Config",
        bash: "Bash",
        cpp: "C / C++",
        csharp: "C#",
        coffeescript: "CoffeeScript",
        css: "CSS",
        diff: "Diff",
        elixir: "Elixir",
        go: "Go",
        html: "HTML", // alias of XML
        // http: "HTTP",
        ini: "INI / TOML",
        java: "Java",
        javascript: "JavaScript",
        json: "JSON",
        kotlin: "Kotlin",
        lua: "Lua",
        less: "Less",
        makefile: "Makefile",
        markdown: "Markdown",
        nginx: "Nginx Config",
        objectivec: "Objective-C",
        properties: "Properties",
        perl: "Perl",
        plaintext: "Text",
        python: "Python",
        php: "PHP",
        rust: "Rust",
        ruby: "Ruby",
        // shell: "Shell",
        sql: "SQL",
        swift: "Swift",
        scss: "SCSS",
        typescript: "TypeScript",
        xml: "XML",
        yaml: "YAML",
    };

    var languages_1 = { LANGUAGES: languages, skipBuild: SKIP_BUILD };
    var languages_2 = languages_1.LANGUAGES;
    var languages_3 = languages_1.skipBuild;

    const themeChosen = getCookie("theme") || THEMES_1.default;

    function renderLineNumbers() {
        const block = document.querySelectorAll('pre code.hljs')[1];
        const lineNumbers = document.querySelectorAll('pre code.hljs')[0];
        const rawCode = block.innerHTML;
        const lines = rawCode.split("\n");
        let arr = Array.from({length: lines.length}, (v, k) => k+1);
        lineNumbers.innerHTML = arr.join("\n");
    }

    function fixupUI(theme) {
        let data = THEMES_1.find((t) => t.file === theme);
        document.body.classList.toggle("dark", data.dark);
        document.body.classList.toggle("light", !data.dark);
    }

    const pasteShow = () => {
        const themesEl = document.getElementById("themes");
        for (let el of themesEl.childNodes) {
            el.remove();
        }
        for (let theme of THEMES_1) {
            let option = document.createElement("option");
            if (themeChosen == theme.file) {
                option.selected = true;
            }
            option.value = `${theme.file}`;
            option.innerHTML = theme.name;
            themesEl.appendChild(option);
        }

        fixupUI(themesEl.value);


        // let group = document.createElement("optgroup")
        // group.label = "Normal"
        // themesEl.appendChild(group);
        // let option = document.createElement("option")
        // option.innerHTML="Testing"
        // group.appendChild(option)

        // group = document.createElement("optgroup")
        // group.label = "Others"
        // themesEl.appendChild(group);
        // for (let theme of THEMES) {
        //     let option = document.createElement("option")
        //     if (themeChosen == theme.file) {
        //         option.selected = true;
        //     }
        //     option.value = `${theme.file}`;
        //     option.innerHTML = theme.name;
        //     group.appendChild(option);
        // }

        renderLineNumbers();

        // [].forEach.call(blocks, hljs.highlightBlock);
        const code = document.querySelectorAll('pre code.hljs')[1];
        hljs.highlightBlock(code);
        // const lang = document.getElementById("language")
        // lang.innerHTML = LANGUAGES[code.result.language] || code.result.language;


        themesEl.addEventListener("change", (event) => {
            var theme = document.getElementById("hljsTheme");
            if (event.target.value==="")
                return;
            theme.href = `/css/v/${event.target.value}`;

            fixupUI(event.target.value);
            setCookie("theme", event.target.value, {until: Infinity});
        });
    };

    exports.pasteNew = pasteNew;
    exports.pasteShow = pasteShow;

    return exports;

}({}));
